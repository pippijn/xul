<content type="application/x.deki0805+xml" title="tree"><body xmlns:eval="http://mindtouch.com/2007/dekiscript"><div class="noinclude"><span class="script">template.XULRefElem()</span></div><p>A container which can be used to hold a tabular or hierarchical set of rows of elements. The tree may contain any number of rows and any number of columns. Each row of the tree may contain child rows which are displayed indented from the parent. Unlike other elements, the data to display inside the tree is not specified using tags, but is determined from a view object. The view object implements the <span class="script">interface("nsITreeView")</span> interface. The view is queried for the data to appear in the tree. There are several ways in which trees are used, as listed below. The second column lists the interfaces available via the tree's <span class="script">template.XULProp("view")</span> property. The third column indicates whether <span class="script">template.XULElem("treeitem")</span> element are used.</p><p>If you would like to allow the tree to be horizontally scrolled, simply set the <span class="script">template.XULAttr("width")</span> attributes for each column to make the tree wider than its containing object.</p><table class="fullwidth-table"><tbody><tr><th>Tree type</th><th>View interfaces</th><th>Has DOM nodes?</th><th>Description</th></tr><tr><td>Content tree</td><td><span class="script">interface("nsITreeView")</span>, <span class="script">interface("nsITreeContentView")</span></td><td>Yes</td><td>This tree has <span class="script">template.XULElem("treeitem")</span> elements placed within the <span class="script">template.XULElem("treechildren")</span> element. In this situation, a content view (which implements the interface <span class="script">interface("nsITreeContentView")</span>) which is a more specialized type of view, uses the <span class="script">template.XULElem("treeitem")</span> elements and their descendants to determine the data to display in the tree. However, the treeitems are not displayed directly; they are used only as data to the content view. However, the content view will automatically update the tree if treeitems are changed.</td></tr><tr><td>RDF tree</td><td><span class="script">interface("nsITreeView")</span>, <span class="script">interface("nsIXULTreeBuilder")</span></td><td>No</td><td>This tree is generated from an RDF datasource. It is used when a tree has a <span class="script">template.XULAttr("datasources")</span> attribute, and has <code>dont-build-content</code> in its <span class="script">template.XULAttr("flags")</span> attribute. For this tree, the data comes directly from the RDF datasource. DOM <span class="script">template.XULElem("treeitem")</span>s are not created. Even though the template uses treeitem elements to define the content, DOM nodes for these elements are not created. This is the type that should be used for RDF generated trees with lots of rows.</td></tr><tr><td>RDF content tree</td><td><span class="script">interface("nsITreeView")</span>, <span class="script">interface("nsIXULTreeBuilder")</span>, <span class="script">interface("nsITreeContentView")</span></td><td>Yes</td><td>This tree is generated from an RDF datasource. It is similar to the previous type but is used when the tree does not have <code>dont-build-content</code> in its <span class="script">template.XULAttr("flags")</span> attribute. DOM <span class="script">template.XULElem("treeitem")</span>s are created, so you can access the data using RDF functions or DOM functions. This type is suitable for RDF generated trees with a fairly small number of rows.</td></tr><tr><td>Custom tree view</td><td><span class="script">interface("nsITreeView")</span></td><td>No</td><td>For this tree you implement the <span class="script">interface("nsITreeView")</span> interface yourself. The tree's data is retrieved from this custom view. The custom view should be attached to the tree by setting its <span class="script">template.XULProp("view")</span> property.</td></tr></tbody></table><p>More information is available in the <a href="/en/XUL_Tutorial/Trees" title="en/XUL_Tutorial/Trees">XUL tutorial</a>. Also <a href="/en/Tree_Widget_Changes" title="en/Tree_Widget_Changes">Tree Widget Changes</a>.</p><table style="border: 1px solid rgb(204, 204, 204); margin: 0px 0px 10px 10px; padding: 0px 10px; background: rgb(238, 238, 238) none repeat scroll 0% 0%; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial;"><tbody><tr><td><strong><a href="/en/XUL_accessibility_guidelines#Trees" title="en/XUL_accessibility_guidelines#Trees">Relevant accessbility guidelines</a></strong><small><ul><li>Provide alternative access (for example, via menus) to column picker and for header behaviors like sorting (these have no default keyboard access).</li></ul></small></td></tr></tbody></table><dl><dt>Attributes</dt><dd><span class="script">template.PrefAnch("a-", "disableKeyNavigation")</span>, <span class="script">template.PrefAnch("a-", "disabled")</span>, <span class="script">template.PrefAnch("a-", "tree.editable", "editable")</span>, <span class="script">template.PrefAnch("a-", "enableColumnDrag")</span>, <span class="script">template.PrefAnch("a-", "flags")</span>, <span class="script">template.PrefAnch("a-", "hidecolumnpicker")</span>, <span class="script">template.PrefAnch("a-", "tree.onselect", "onselect")</span>, <span class="script">template.PrefAnch("a-", "rows")</span>, <span class="script">template.PrefAnch("a-", "seltype")</span>, <span class="script">template.PrefAnch("a-", "statedatasource")</span>, <span class="script">template.PrefAnch("a-", "tabindex")</span>, <span class="script">template.PrefAnch("a-", "treelines")</span></dd></dl><dl><dt>Properties</dt><dd><span class="script">template.PrefAnch("p-", "accessibleType")</span>, <span class="script">template.PrefAnch("p-", "builderView")</span>, <span class="script">template.PrefAnch("p-", "columns")</span>, <span class="script">template.PrefAnch("p-", "contentView")</span>, <span class="script">template.PrefAnch("p-", "currentIndex")</span>, <span class="script">template.PrefAnch("p-", "disableKeyNavigation")</span>, <span class="script">template.PrefAnch("p-", "disabled")</span>, <span class="script">template.PrefAnch("p-", "editingColumn")</span>, <span class="script">template.PrefAnch("p-", "editingRow")</span>, <span class="script">template.PrefAnch("p-", "enableColumnDrag")</span>, <span class="script">template.PrefAnch("p-", "firstOrdinalColumn")</span>, <span class="script">template.PrefAnch("p-", "tree.inputField", "inputField")</span>, <span class="script">template.PrefAnch("p-", "selType")</span>, <span class="script">template.PrefAnch("p-", "selstyle")</span>, <span class="script">template.PrefAnch("p-", "tabIndex")</span>, <span class="script">template.PrefAnch("p-", "treeBoxObject")</span>, <span class="script">template.PrefAnch("p-", "view")</span></dd></dl><h3 name="Examples">Examples</h3><h4>A tree with several columns</h4><pre class="script" function="syntax.Xml">
&lt;tree flex="1" rows="2"&gt;

  &lt;treecols&gt;
    &lt;treecol id="sender" label="Sender" flex="1"/&gt;
    &lt;treecol id="subject" label="Subject" flex="2"/&gt;
  &lt;/treecols&gt;

  &lt;treechildren&gt;
    &lt;treeitem&gt;
      &lt;treerow&gt;
        &lt;treecell label="joe@somewhere.com"/&gt;
        &lt;treecell label="Top secret plans"/&gt;
      &lt;/treerow&gt;
    &lt;/treeitem&gt;
    &lt;treeitem&gt;
      &lt;treerow&gt;
        &lt;treecell label="mel@whereever.com"/&gt;
        &lt;treecell label="Let's do lunch"/&gt;
      &lt;/treerow&gt;
    &lt;/treeitem&gt;
  &lt;/treechildren&gt;

&lt;/tree&gt;
</pre><div><img alt="Image:trees1.png" class="internal" src="/@api/deki/files/899/=Trees1.png" /></div><h4>A tree with several columns and nested items</h4><pre class="script" function="syntax.Xml">
&lt;tree id="myTree" flex="1" hidecolumnpicker="false" seltype="single" class="tree"
      rows="5"&gt;
  &lt;treecols id="myTree2-treeCols"&gt;
    &lt;treecol id="myTree2-treeCol0" primary="true" flex="2" label="Column A"
             persist="width" ordinal="1"/&gt;
    &lt;splitter class="tree-splitter" ordinal="2"/&gt;
    &lt;treecol id="myTree2-treeCol1" flex="1" label="Column B"
             persist="width" ordinal="3"/&gt;
  &lt;/treecols&gt;
  &lt;treechildren&gt;
    &lt;treeitem&gt;
      &lt;treerow&gt;
        &lt;treecell label="1"/&gt;
        &lt;treecell label="a"/&gt;
      &lt;/treerow&gt;
    &lt;/treeitem&gt;
    &lt;!-- Make sure to set container="true" --&gt;
    &lt;treeitem container="true" open="true"&gt;
      &lt;treerow&gt;
        &lt;treecell label="2"/&gt;
        &lt;treecell label="b"/&gt;
      &lt;/treerow&gt;
      &lt;treechildren&gt;
        &lt;treeitem&gt;
          &lt;treerow&gt;
            &lt;treecell label="2a"/&gt;
            &lt;treecell label="ba"/&gt;
          &lt;/treerow&gt;
        &lt;/treeitem&gt;
      &lt;/treechildren&gt;
    &lt;/treeitem&gt;
  &lt;/treechildren&gt;
&lt;/tree&gt;
</pre><h3 name="Attributes">Attributes</h3><p><span class="script">template.XULAttrInherited()</span><span class="script">template.XULAttrInc("disabled")</span><span class="script">template.XULAttrInc("disableKeyNavigation")</span><span class="script">template.XULAttrInc("tree.editable")</span><span class="script">template.XULAttrInc("enableColumnDrag")</span><span class="script">template.XULAttrInc("flags")</span><span class="script">template.XULAttrInc("hidecolumnpicker")</span><span class="script">template.XULAttrInc("tree.onselect")</span><span class="script">template.XULAttrInc("rows")</span><span class="script">template.XULAttrInc("seltype")</span><span class="script">template.XULAttrInc("statedatasource")</span><span class="script">template.XULAttrInc("tabindex")</span><span class="script">template.XULAttrInc("treelines")</span></p><h3 name="Properties">Properties</h3><p><span class="script">template.XULPropInherited()</span><span class="script">template.XULPropInc("accessibleType")</span><span class="script">template.XULPropInc("builderView")</span><span class="script">template.XULPropInc("columns")</span><span class="script">template.XULPropInc("contentView")</span><span class="script">template.XULPropInc("currentIndex")</span><span class="script">template.XULPropInc("disabled")</span><span class="script">template.XULPropInc("disableKeyNavigation")</span><span class="script">template.XULPropInc("editingColumn")</span><span class="script">template.XULPropInc("editingRow")</span><span class="script">template.XULPropInc("enableColumnDrag")</span><span class="script">template.XULPropInc("firstOrdinalColumn")</span><span class="script">template.XULPropInc("tree.inputField")</span><span class="script">template.XULPropInc("selType")</span><span class="script">template.XULPropInc("selstyle")</span><span class="script">template.XULPropInc("tabIndex")</span><span class="script">template.XULPropInc("treeBoxObject")</span><span class="script">template.XULPropInc("view")</span></p><h3 name="Methods">Methods</h3><p><span class="script">template.XULMethInheritedWide()</span><span class="script">template.XULMethInc("startEditing")</span><span class="script">template.XULMethInc("stopEditing")</span></p><h3 name="Related">Related</h3><dl><dt>Elements</dt><dd><span class="script">XULElem("treecols")</span>, <span class="script">XULElem("treecol")</span>, <span class="script">XULElem("treechildren")</span>, <span class="script">XULElem("treeitem")</span>, <span class="script">XULElem("treerow")</span>, <span class="script">XULElem("treecell")</span> and <span class="script">XULElem("treeseparator")</span>..</dd><dt>Interfaces</dt><dd><span class="script">interface("nsIAccessibleProvider")</span>, <span class="script">interface("nsIDOMXULTreeElement")</span>, <span class="script">interface("nsIDOMXULMultiSelectControlElement")</span></dd></dl><h3 name="Script_Examples">Script Examples</h3><p>To have alternating colors for each row, use the style rules like the following:</p><pre class="script" function="syntax.Css">
treechildren::-moz-tree-row(selected) { background-color: #FFFFAA; }
treechildren::-moz-tree-row(odd) { background-color: #EEEEEE; }
treechildren::-moz-tree-row(odd, selected) { background-color: #FFFFAA; }
treechildren::-moz-tree-cell-text(selected) { color: #000000; }
treechildren::-moz-tree-cell-text(odd, selected) { color: #000000; }
</pre><p>If using a content tree view, use the following to get the value of the id attribute for each of the selected rows of a tree:</p><pre class="script" function="syntax.JavaScript">
var idList = [];
var rangeCount = tree.view.selection.getRangeCount();
for (var i = 0; i &lt; rangeCount; i++) {
  var start = {};
  var end = {};
  tree.view.selection.getRangeAt(i, start, end);
  for (var c = start.value; c &lt;= end.value; c++) {
    idList.push(tree.view.getItemAtIndex(c).firstChild.id);
  }
}
</pre><p>The following returns a array of the indicies of the rows where the value is checked in a checkbox type column:</p><pre class="script" function="syntax.JavaScript">
function getCellChecked(tree, columnid) {
  var arr = [];
  var column = tree.columns.getNamedColumn(columnid);
  for (var i = 0; i &lt; tree.view.rowCount; i++) {
    if (tree.view.getCellValue(i, column) == 'true')
      arr.push(i);
  }
  return arr;
}
</pre><p>To get the text value for a specific column (for example column 'age') from the currently focused row in the tree:</p><pre class="script" function="syntax.JavaScript">
var t = document.getElementById('mytree');
document.title = t.view.getCellText(t.currentIndex,t.columns.getNamedColumn('age'));
</pre><p><span class="script">wiki.languages( { "fr": "fr/XUL/tree", "ja": "ja/XUL/tree", "pl": "pl/XUL/tree" } )</span></p></body></content>