<content type="application/x.deki0805+xml" title="editor"><body xmlns:eval="http://mindtouch.com/2007/dekiscript">
<div class="noinclude"><span class="script">template.XULRefElem()</span></div>
<p>A frame which is expected to contain an editable document. Set the value of the <span class="script">template.XULAttr("editortype")</span> attribute to <code>html</code> to create an editor document. Mozilla provides two types of editors, the HTML editor and the plaintext editor. The editor does not provide any editing user interface; you would supply that yourself. However, text editing, image resizing, and table row and cell editing capabilities are provided. If you do not set the <span class="script">template.XULAttr("editortype")</span> attribute on an editor, you must enable editing using the <span class="script">template.XULMeth("makeEditable")</span> method.</p>
<p>To specify the document to load in the editor use the <span class="script">template.XULAttr("src")</span> attribute. However, an issue is that if you specify the <span class="script">template.XULAttr("src")</span> attribute initially on the <code>editor</code> tag in the XUL file, the document does not become editable by default. To enable editing on an editor, do either of the following:</p>
<ol> <li>Set the <span class="script">template.XULAttr("src")</span> attribute on the editor after the outer window has loaded, for example, in the <code>onload</code> handler. You might also set the <span class="script">template.XULAttr("src")</span> attribute based on what the user selects from a file dialog. In this case, set the editortype attribute on the editor.</li> <li>Call the <span class="script">template.XULMeth("makeEditable")</span> method to make the document loaded in the editor editable.</li> <li>Enable the design mode of the document loaded in the editor.</li>
</ol>
<p>To edit a new document, set the <span class="script">template.XULAttr("src")</span> attribute to <code>about:blank</code>.</p>
<p>To access most of the functionality of the editor, your application must be part of an extension or part of the chrome. XUL applications loaded via a URL from a web server will not be able to access most of the features of the editor.</p>
<p>See the <a title="en/Rich-Text_Editing_in_Mozilla" href="/en/Rich-Text_Editing_in_Mozilla">Rich text editing</a> and <a title="en/Midas" href="/en/Midas">Midas</a> pages for more information about Gecko's built-in rich text editor.</p>
<dl> <dt>Attributes</dt> <dd><span class="script">template.PrefAnch("a-", "editortype")</span>, <span class="script">template.PrefAnch("a-", "src")</span>, <span class="script">template.PrefAnch("a-", "editor.type", "type")</span></dd>
</dl>
<dl> <dt>Properties</dt> <dd><span class="script">template.PrefAnch("p-", "accessibleType")</span>, <span class="script">template.PrefAnch("p-", "commandManager")</span>, <span class="script">template.PrefAnch("p-", "contentDocument")</span>, <span class="script">template.PrefAnch("p-", "contentWindow")</span>, <span class="script">template.PrefAnch("p-", "docShell")</span>, <span class="script">template.PrefAnch("p-", "editingSession")</span>, <span class="script">template.PrefAnch("p-", "editortype")</span>, <span class="script">template.PrefAnch("p-", "webBrowserFind")</span>, <span class="script">template.PrefAnch("p-", "webNavigation")</span></dd>
</dl>
<dl> <dt>Methods</dt> <dd><span class="script">template.PrefAnch("m-", "getEditor")</span>, <span class="script">template.PrefAnch("m-", "getHTMLEditor")</span>, <span class="script">template.PrefAnch("m-", "makeEditable")</span></dd>
</dl>
<h3 name="Examples">Examples</h3>
<p>This example shows how to made the editor editable by setting the designMode property of the loaded HTML document:</p>
<pre>
&lt;script language="javascript"&gt;
function initEditor(){
    // this function is called to set up the editor
    var editor = document.getElementById("myEditor");
    editor.contentDocument.designMode = 'on';
}
&lt;/script&gt;
&lt;editor id="myEditor" editortype="html" src="about:blank" flex="1" type="content-primary"/&gt;
</pre>
<p>Once editable, the document can have special formatting and other HTML pieces added to it using the document.execCommand method:</p>
<pre>
    var editor = document.getElementById("myEditor");

    // toggle bold for the current selection
    editor.contentDocument.execCommand("bold", false, null);
</pre>
<p>See the <a title="en/Midas" href="/en/Midas">Midas</a> overview for more command strings.</p>
<h3 name="Attributes">Attributes</h3>
<p><span class="script">template.XULAttrInherited()</span> <span class="script">template.XULAttrInc("editortype")</span> <span class="script">template.XULAttrInc("src")</span> <span class="script">template.XULAttrInc("editor.type")</span></p>
<h3 name="Properties">Properties</h3>
<p><span class="script">template.XULPropInherited()</span> <span class="script">template.XULPropInc("accessibleType")</span> <span class="script">template.XULPropInc("commandManager")</span> <span class="script">template.XULPropInc("contentDocument")</span> <span class="script">template.XULPropInc("contentWindow")</span> <span class="script">template.XULPropInc("docShell")</span> <span class="script">template.XULPropInc("editingSession")</span> <span class="script">template.XULPropInc("editortype")</span> <span class="script">template.XULPropInc("webBrowserFind")</span> <span class="script">template.XULPropInc("webNavigation")</span></p>
<h3 name="Methods">Methods</h3>
<p><span class="script">template.XULMethInc("getEditor")</span> <span class="script">template.XULMethInc("getHTMLEditor")</span> <span class="script">template.XULMethInc("makeEditable")</span> <span class="script">template.XULMethInheritedWide()</span></p>
<h3 name="Related">Related</h3>
<dl> <dt>Interfaces</dt> <dd><span class="script">interface("nsIAccessibleProvider")</span></dd>
</dl>

<p><span class="script"> wiki.languages( { "ja": "ja/XUL/editor", "pl": "pl/XUL/editor" } ) </span></p></body></content>