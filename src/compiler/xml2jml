#!/usr/bin/env perl

use common::sense;
use base 'XML::SAX::Base';

use Data::Dumper;
use Encode 'encode';
use XML::SAX;

my $XML = $ARGV[0] or die;
my $JML = $ARGV[1] or die;

open my $fh, '>', $JML
   or die "$JML: $!";

my $p = XML::SAX::ParserFactory->parser (Handler => __PACKAGE__->new);
$p->parse_uri ($XML);

my $indent = 0;
sub out {
   print $fh "\t" x $indent, @_;
}
sub escape {
   my ($text) = @_;
   for ($text) {
      s/\\/\\\\/g;
      s/"/\\"/g;
      s/&/&amp;/g;
      s/\xa0/&#xa0;/g;
   }
   encode 'utf-8', $text
}

my $pre = 0;
sub wrapout {
   use Text::Wrap;

   # the text already seems to be manually wrapped
   # or we are in a <pre> tag
   # so we won't mess with the indentation
   return out "\"$_[0]\"\n"
      if $_[0] =~ /\n/ or $pre;

   my @lines = split /\n/, fill '', '', $_[0];
   out "\"$lines[$_]", $_ != $#lines ? " " : "", "\"\n"
      for 0 .. $#lines;
}

my $chardata;
sub chardump {
   if (defined $chardata) {
      wrapout escape $chardata;
      undef $chardata;
   }
}


sub start_element {
   my ($self, $data) = @_;

   chardump;

   out "$data->{Name} {\n";
   ++$indent;
   ++$pre if $data->{Name} eq 'pre';
   out "$_->{Name}: \"", (escape $_->{Value}), "\"\n"
      for values %{ $data->{Attributes} };
   #print Dumper $data;
   #die;
}

sub end_element {
   my ($self, $data) = @_;

   chardump;

   --$pre if $data->{Name} eq 'pre';
   --$indent;
   out "}\n";
}

sub characters {
   my ($self, $data) = @_;

   $chardata .= $data->{Data}
}
